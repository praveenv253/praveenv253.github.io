<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="https://praveenv253.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://praveenv253.github.io/" rel="alternate" type="text/html" /><updated>2017-08-11T23:50:15-04:00</updated><id>https://praveenv253.github.io/</id><title type="html">Praveen’s website</title><subtitle>Praveen Venkatesh's personal website.</subtitle><author><name>Praveen Venkatesh</name></author><entry><title type="html">Directions of information flow and Granger Causality</title><link href="https://praveenv253.github.io/research/2017/08/11/gc-info-flows.html" rel="alternate" type="text/html" title="Directions of information flow and Granger Causality" /><published>2017-08-11T21:06:00-04:00</published><updated>2017-08-11T21:06:00-04:00</updated><id>https://praveenv253.github.io/research/2017/08/11/gc-info-flows</id><content type="html" xml:base="https://praveenv253.github.io/research/2017/08/11/gc-info-flows.html">&lt;p&gt;Granger causality is an established measure of the “causal influence” that
one statistical process has on another. It has been used extensively in
neuroscience to infer statistical causal influences. Recently, however,
many works in the neuroscience literature have begun to compare Granger
causal influences along forward and reverse links of a feedback network in
order to determine the direction of information flow in this network.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/gc-vs-message.jpg&quot; alt=&quot;Greater GC can be opposite the direction of Info flow&quot; width=&quot;500px&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We asked whether comparing Granger causal influences correctly captures the
direction of information flow in a simple feedback network. We discovered,
using simple theoretical experiments, that comparison of Granger causal
influences can, in fact, yield an answer that is opposite to the true
direction of information flow.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/publications#Venkatesh2015Direction_Allerton&quot; class=&quot;publication__link-item&quot;&gt;&lt;i class=&quot;fa fa-file-text-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Link to paper&lt;/a&gt;
&lt;a href=&quot;/publications#Venkatesh2015Direction_SfN&quot; class=&quot;publication__link-item&quot;&gt;&lt;i class=&quot;fa fa-file-image-o&quot; aria-hidden=&quot;true&quot;&gt;&lt;/i&gt; Link to poster&lt;/a&gt;&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="Granger Causality" /><category term="Directed Information" /><category term="Information Flow" /><category term="Message" /><summary type="html">Granger causality is an established measure of the “causal influence” that one statistical process has on another. It has been used extensively in neuroscience to infer statistical causal influences. Recently, however, many works in the neuroscience literature have begun to compare Granger causal influences along forward and reverse links of a feedback network in order to determine the direction of information flow in this network.</summary></entry><entry><title type="html">Export syntax-highlighted pdf files from vim</title><link href="https://praveenv253.github.io/logs/2016/09/13/log-message.html" rel="alternate" type="text/html" title="Export syntax-highlighted pdf files from vim" /><published>2016-09-13T14:07:40-04:00</published><updated>2016-09-13T14:07:40-04:00</updated><id>https://praveenv253.github.io/logs/2016/09/13/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/09/13/log-message.html">&lt;p&gt;If you want to export from vim to a pdf file with syntax highlighting, hardcopy does not seem to use the correct syntax highlighting file. Or rather, it uses GUI settings, which means that unless your syntax highlighting file takes care of looking good on gvim, it will not give you a good result. For you to get syntax highlighting &lt;em&gt;at all&lt;/em&gt;, you must first &lt;code class=&quot;highlighter-rouge&quot;&gt;:set term=xterm-256color-italic&lt;/code&gt; even if it is already set. Do it even if &lt;code class=&quot;highlighter-rouge&quot;&gt;:set term&lt;/code&gt; returns &lt;code class=&quot;highlighter-rouge&quot;&gt;xterm-256color-italic&lt;/code&gt;. Then, to actually get &lt;em&gt;terminal colours&lt;/em&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;:TOhtml&lt;/code&gt;, which converts the file into an html page, which you can then print from your browser. For a good print colorscheme, run &lt;code class=&quot;highlighter-rouge&quot;&gt;:colorscheme print&lt;/code&gt;, which is is a custom light-background colorscheme I made for printing. Do this before running &lt;code class=&quot;highlighter-rouge&quot;&gt;:TOhtml&lt;/code&gt;, obviously.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="vim" /><category term="print" /><category term="hardcopy" /><category term="syntax-highlighting" /><category term="colorscheme" /><summary type="html">If you want to export from vim to a pdf file with syntax highlighting, hardcopy does not seem to use the correct syntax highlighting file. Or rather, it uses GUI settings, which means that unless your syntax highlighting file takes care of looking good on gvim, it will not give you a good result. For you to get syntax highlighting at all, you must first :set term=xterm-256color-italic even if it is already set. Do it even if :set term returns xterm-256color-italic. Then, to actually get terminal colours, use :TOhtml, which converts the file into an html page, which you can then print from your browser. For a good print colorscheme, run :colorscheme print, which is is a custom light-background colorscheme I made for printing. Do this before running :TOhtml, obviously.</summary></entry><entry><title type="html">Making vim display italicised text</title><link href="https://praveenv253.github.io/logs/2016/09/12/log-message.html" rel="alternate" type="text/html" title="Making vim display italicised text" /><published>2016-09-12T18:23:07-04:00</published><updated>2016-09-12T18:23:07-04:00</updated><id>https://praveenv253.github.io/logs/2016/09/12/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/09/12/log-message.html">&lt;p&gt;To make vim display italicised text, see &lt;a href=&quot;http://www.nerdyweekly.com/posts/enable-italic-text-vim-tmux-gnome-terminal/&quot;&gt;this&lt;/a&gt; wonderful blog entry. Essentially, we need to manually map the escape sequences to the keywords &lt;code class=&quot;highlighter-rouge&quot;&gt;sitm&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ritm&lt;/code&gt;, which are used by vim to set and remove italic mode respectively. The file in question, &lt;code class=&quot;highlighter-rouge&quot;&gt;xterm-256color-italic.terminfo&lt;/code&gt;, has been added to the &lt;code class=&quot;highlighter-rouge&quot;&gt;misc&lt;/code&gt; repository as well. It contains all relevant install info. Note that &lt;code class=&quot;highlighter-rouge&quot;&gt;TERM&lt;/code&gt; must be set to &lt;code class=&quot;highlighter-rouge&quot;&gt;xterm-256color-italic&lt;/code&gt; by &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-terminal&lt;/code&gt; for this to take effect. &lt;a href=&quot;http://askubuntu.com/questions/233280/gnome-terminal-reports-term-to-be-xterm&quot;&gt;This&lt;/a&gt; askubuntu question tells you how to do it. Set the command executed by &lt;code class=&quot;highlighter-rouge&quot;&gt;gnome-terminal&lt;/code&gt; to be &lt;code class=&quot;highlighter-rouge&quot;&gt;env TERM=xterm-256color-italic /bin/bash&lt;/code&gt;.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="vim" /><category term="italics" /><category term="comments" /><summary type="html">To make vim display italicised text, see this wonderful blog entry. Essentially, we need to manually map the escape sequences to the keywords sitm and ritm, which are used by vim to set and remove italic mode respectively. The file in question, xterm-256color-italic.terminfo, has been added to the misc repository as well. It contains all relevant install info. Note that TERM must be set to xterm-256color-italic by gnome-terminal for this to take effect. This askubuntu question tells you how to do it. Set the command executed by gnome-terminal to be env TERM=xterm-256color-italic /bin/bash.</summary></entry><entry><title type="html">Installation instructions for VTK (for mayavi)</title><link href="https://praveenv253.github.io/logs/2016/08/06/log-message.html" rel="alternate" type="text/html" title="Installation instructions for VTK (for mayavi)" /><published>2016-08-06T17:04:42-04:00</published><updated>2016-08-06T17:04:42-04:00</updated><id>https://praveenv253.github.io/logs/2016/08/06/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/08/06/log-message.html">&lt;p&gt;Installation instructions for vtk are terribly hard to find. &lt;a href=&quot;http://www.vtk.org/Wiki/VTK/Configure_and_Build&quot;&gt;Here&lt;/a&gt; they are: from the public wiki.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="vtk" /><category term="mayavi" /><category term="install" /><summary type="html">Installation instructions for vtk are terribly hard to find. Here they are: from the public wiki.</summary></entry><entry><title type="html">Extending Python using C</title><link href="https://praveenv253.github.io/logs/2016/07/16/log-message.html" rel="alternate" type="text/html" title="Extending Python using C" /><published>2016-07-16T11:26:47-04:00</published><updated>2016-07-16T11:26:47-04:00</updated><id>https://praveenv253.github.io/logs/2016/07/16/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/07/16/log-message.html">&lt;p&gt;For an introduction to extending python using C, via PyObject and the like, take a look at &lt;a href=&quot;http://dan.iel.fm/posts/python-c-extensions/&quot;&gt;this&lt;/a&gt; tutorial.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="python" /><category term="c" /><category term="extensions" /><summary type="html">For an introduction to extending python using C, via PyObject and the like, take a look at this tutorial.</summary></entry><entry><title type="html">Which which is which</title><link href="https://praveenv253.github.io/logs/2016/07/14/log-message.html" rel="alternate" type="text/html" title="Which which is which" /><published>2016-07-14T14:31:17-04:00</published><updated>2016-07-14T14:31:17-04:00</updated><id>https://praveenv253.github.io/logs/2016/07/14/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/07/14/log-message.html">&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;which&lt;/code&gt; program used by Fedora/CentOS/RHEL is far more advanced than that used by Debian/Ubuntu. Get the Fedora version &lt;a href=&quot;https://carlowood.github.io/which/&quot;&gt;here&lt;/a&gt;. I have also created an alias for the Fedora version in bash_aliases, which shows you aliases and functions. &lt;em&gt;Very&lt;/em&gt; useful.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="which" /><category term="rhel" /><category term="ubuntu" /><summary type="html">The which program used by Fedora/CentOS/RHEL is far more advanced than that used by Debian/Ubuntu. Get the Fedora version here. I have also created an alias for the Fedora version in bash_aliases, which shows you aliases and functions. Very useful.</summary></entry><entry><title type="html">Get ls to sort by file extension</title><link href="https://praveenv253.github.io/logs/2016/07/13/log-message.html" rel="alternate" type="text/html" title="Get ls to sort by file extension" /><published>2016-07-13T20:04:21-04:00</published><updated>2016-07-13T20:04:21-04:00</updated><id>https://praveenv253.github.io/logs/2016/07/13/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/07/13/log-message.html">&lt;p&gt;Get ls to sort by file extension using &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -X&lt;/code&gt;. I have added this to &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; so this is now the default. If you want the usual directory listing, for instance while perusing a directory with a lot of files of different file type, use &lt;code class=&quot;highlighter-rouge&quot;&gt;ls -U&lt;/code&gt;.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="ls" /><category term="sort" /><category term="file extension" /><summary type="html">Get ls to sort by file extension using ls -X. I have added this to .bashrc so this is now the default. If you want the usual directory listing, for instance while perusing a directory with a lot of files of different file type, use ls -U.</summary></entry><entry><title type="html">Installing a user-defined python module in your own system</title><link href="https://praveenv253.github.io/logs/2016/07/12/log-message.html" rel="alternate" type="text/html" title="Installing a user-defined python module in your own system" /><published>2016-07-12T13:20:11-04:00</published><updated>2016-07-12T13:20:11-04:00</updated><id>https://praveenv253.github.io/logs/2016/07/12/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/07/12/log-message.html">&lt;p&gt;To make a user-defined python module that you can import in many scripts, you must place your module in one of the site-packages directories in &lt;code class=&quot;highlighter-rouge&quot;&gt;sys.path&lt;/code&gt;. If you are not using a virtual environment to run your programs in, then the correct place for this is &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.local/lib/python3.4/site-packages/&lt;/code&gt;. It was meant for exactly this purpose; see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0370/&quot;&gt;PEP 370&lt;/a&gt;. If you are using a virtualenv, then you could simply create a symbolic link in the virtualenv site-packages directory to your module. Or you could install your module in &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/lib/python3.4&lt;/code&gt; with sudo privileges (probably not a good idea though). There should be a way to get virtualenv to look in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.local&lt;/code&gt; as well, but I have not yet figured this out.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="python" /><category term="user defined" /><category term="module" /><category term="package" /><summary type="html">To make a user-defined python module that you can import in many scripts, you must place your module in one of the site-packages directories in sys.path. If you are not using a virtual environment to run your programs in, then the correct place for this is ~/.local/lib/python3.4/site-packages/. It was meant for exactly this purpose; see PEP 370. If you are using a virtualenv, then you could simply create a symbolic link in the virtualenv site-packages directory to your module. Or you could install your module in /usr/lib/python3.4 with sudo privileges (probably not a good idea though). There should be a way to get virtualenv to look in ~/.local as well, but I have not yet figured this out.</summary></entry><entry><title type="html">Short tutorial on screen</title><link href="https://praveenv253.github.io/logs/2016/05/03/log-message.html" rel="alternate" type="text/html" title="Short tutorial on screen" /><published>2016-05-03T16:29:03-04:00</published><updated>2016-05-03T16:29:03-04:00</updated><id>https://praveenv253.github.io/logs/2016/05/03/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/05/03/log-message.html">&lt;p&gt;Take a look at &lt;a href=&quot;https://www.rackaid.com/blog/linux-screen-tutorial-and-how-to/&quot;&gt;this&lt;/a&gt; for a nice, short tutorial on screen. Be warned: screen and my shortcuts in vim do not seem to interact very well.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="screen" /><summary type="html">Take a look at this for a nice, short tutorial on screen. Be warned: screen and my shortcuts in vim do not seem to interact very well.</summary></entry><entry><title type="html">Place pdf pages side-by-side in linux</title><link href="https://praveenv253.github.io/logs/2016/04/19/log-message.html" rel="alternate" type="text/html" title="Place pdf pages side-by-side in linux" /><published>2016-04-19T23:38:17-04:00</published><updated>2016-04-19T23:38:17-04:00</updated><id>https://praveenv253.github.io/logs/2016/04/19/log-message</id><content type="html" xml:base="https://praveenv253.github.io/logs/2016/04/19/log-message.html">&lt;p&gt;To convert a pdf document into one containing two pages per side, simply &lt;code class=&quot;highlighter-rouge&quot;&gt;man pdfnup&lt;/code&gt;. This is a convenient frontend to the more complex &lt;code class=&quot;highlighter-rouge&quot;&gt;pdfjam&lt;/code&gt;. For most purposes, this should suffice: &lt;code class=&quot;highlighter-rouge&quot;&gt;pdfnup --paper letter document.pdf&lt;/code&gt;, which will produce a &lt;code class=&quot;highlighter-rouge&quot;&gt;document-nup.pdf&lt;/code&gt; in the current directory, with two pages per side in landscape orientation.&lt;/p&gt;</content><author><name>Praveen Venkatesh</name></author><category term="log message" /><category term="pdf" /><category term="builtins" /><category term="two pages per side" /><summary type="html">To convert a pdf document into one containing two pages per side, simply man pdfnup. This is a convenient frontend to the more complex pdfjam. For most purposes, this should suffice: pdfnup --paper letter document.pdf, which will produce a document-nup.pdf in the current directory, with two pages per side in landscape orientation.</summary></entry></feed>